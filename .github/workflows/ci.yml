name: CI
on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch: {}

env:
  PACKAGE_NAME: provider-proxmox
  PACKAGE_ROOT: github.com/joekky/provider-proxmox
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  CONTROLLER_IMAGE: ghcr.io/${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Build provider binary and verify
        run: |
          make build
          echo "=== Binary Verification ==="
          ls -la bin/linux_amd64/provider
          file bin/linux_amd64/provider
          echo "Binary size: $(du -h bin/linux_amd64/provider | cut -f1)"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Determine version
      - name: Set Version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "VERSION=latest" >> $GITHUB_ENV
          fi

      # Direct Docker build without using xpkg
      - name: Build and push Docker image
        run: |
          echo "=== Building Docker image ==="
          docker build \
            --build-arg TARGETOS=linux \
            --build-arg TARGETARCH=amd64 \
            -t ${{ env.CONTROLLER_IMAGE }}:${{ env.VERSION }} \
            -f cluster/images/provider-proxmox/Dockerfile .
          
          echo "=== Verifying image ==="
          docker images
          
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            echo "=== Pushing image ==="
            docker push ${{ env.CONTROLLER_IMAGE }}:${{ env.VERSION }}
          fi

      # Build Crossplane package after Docker image is built
      - name: Build and push provider package
        if: github.event_name != 'pull_request'
        run: |
          # Install Crossplane CLI
          curl -sL https://raw.githubusercontent.com/crossplane/crossplane/master/install.sh | sh
          sudo mv crossplane /usr/local/bin/
          
          # Update crossplane.yaml
          export VERSION=${{ env.VERSION }}
          export REGISTRY_IMAGE=${{ env.CONTROLLER_IMAGE }}
          envsubst < package/crossplane.yaml > package/crossplane.yaml.tmp
          mv package/crossplane.yaml.tmp package/crossplane.yaml
          
          # Build package
          crossplane xpkg build -o provider-proxmox.xpkg --ignore ".github/**/*.yml" --package-root ./package --verbose
          
          # Push package
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            crossplane xpkg push ${{ env.IMAGE_NAME }}:${{ env.VERSION }} -f provider-proxmox.xpkg
          fi
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            crossplane xpkg push ${{ env.IMAGE_NAME }}:latest -f provider-proxmox.xpkg
          fi

      - name: Logout from GitHub Container Registry
        if: always()
        run: docker logout ghcr.io